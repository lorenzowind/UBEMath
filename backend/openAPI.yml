openapi: 3.0.0

servers:
  - description: Development server URL
    url: http://127.0.0.1:3333/

info:
  description: HTTP Requests guide to utilize the UBEMath API.
  version: "1.0.0"
  title: UBEMath API

tags:
  - name: authentication
  - name: users
  - name: modules
  - name: sub-modules
  - name: questions
  - name: alternatives
  - name: conquests
  - name: user-answers
  - name: user-conquests
  - name: user-progress
  - name: game-saves

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    positionHeader:
      type: apiKey
      in: header
      name: user_position
  responses:
    UnauthorizedError:
      description: JWT token | User position is missing
    IncorrectToken:
      description: Invalid JWT token
    ExclusiveAccess:
      description: Exclusive for specific user position
  schemas:
    User:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        position:
          type: string
        password:
          type: string
        avatar:
          type: string
          format: binary
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    UserToken:
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    Module:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          format: email
        is_exercise:
          type: boolean
        image:
          type: string
          format: binary
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    SubModule:
      properties:
        id:
          type: string
          format: uuid
        module_id:
          type: string
          format: uuid
        name:
          type: string
        content_url:
          type: string
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    Question:
      properties:
        id:
          type: string
          format: uuid
        sub_module_id:
          type: string
          format: uuid
        statement:
          type: string
        right_letter:
          type: string
        alternatives:
          type: string
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    Alternative:
      properties:
        id:
          type: string
          format: uuid
        question_id:
          type: string
          format: uuid
        letter:
          type: string
        content_url:
          type: string
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    Conquest:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        image:
          type: string
          format: binary
        created_at:
          type: string
          format: dateformat
        updated_at:
          type: string
          format: dateformat
    UserAnswer:
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        question_id:
          type: string
          format: uuid
        answer_letter:
          type: string
    UserConquest:
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        conquest_id:
          type: string
          format: uuid
    UserProgress:
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        submodule_id:
          type: string
          format: uuid
        is_check:
          type: boolean
    GameSave:
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        current_phase:
          type: number

paths:
  /sessions:
    post:
      summary: Creates an user session.
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  email:
                    type: string
                    example: "user@email.com"
                  password:
                    type: string
                    example: "user password"
      responses:
        '200':
          description: Returns a JSON containing the user data and a JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                      name:
                        type: string
                        example: "User Name"
                      email:
                        type: string
                        format: email
                        example: "user@email.com"
                      position:
                        type: string
                        example: "admin"
                      created_at:
                        type: string
                        format: dateformat
                        example: "2020-07-02T21:57:00.421Z"
                      updated_at:
                        type: string
                        format: dateformat
                        example: "2020-07-02T21:57:00.421Z"
                      avatar_url:
                        type: string
                        example: null
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1OTcxMTQ0MDgsImV4cCI6MTU5NzIwMDgwOCwic3ViIjoiMWEwMWY3ZmYtYzZlMy00M2NiLThiNzQtY2YxOWVhZDYyMDdhIn0.P_NlcLb0Ob6j9pC6DxDJiF2q7Xrx6qqWkgOcUgqCpro"
        '401':
          description: 'Incorrect login/password combination.'
  /password/forgot:
    post:
      summary: Generates a token for password recovering.
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@email.com"
      responses:
        '204':
          description: Confirmation of token sent to email successfully.
        '400':
          description: User does not exists.
  /password/reset:
    post:
      summary: Resets the user password.
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "new user password"
                password_confirmation:
                  type: string
                  example: "new user password"
                token:
                  type: string
                  format: uuid
                  example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
      responses:
        '204':
          description: Confirmation of user password changed successfully.
        '400':
          description: Token expired | User token doesn't not exists.

  /users:
    post:
      summary: Creates an user.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "User Name"
                  email:
                    type: string
                    format: email
                    example: "user@email.com"
                  position:
                    type: string
                    example: "admin"
                  password:
                    type: string
                    example: "user password"
      responses:
        '200':
          description: Returns a JSON containing the created user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "User Name"
                  email:
                    type: string
                    format: email
                    example: "user@email.com"
                  position:
                    type: string
                    example: "admin"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  avatar_url:
                    type: string
                    example: null
    put:
      summary: Updates the user.
      tags:
        - users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "New User Name"
                  email:
                    type: string
                    format: email
                    example: "newuser@email.com"
                  position:
                    type: string
                    example: "user"
                  password:
                    type: string
                    example: "new user password"
      responses:
        '200':
          description: Returns a JSON containing the updated user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "New User Name"
                  email:
                    type: string
                    format: email
                    example: "newuser@email.com"
                  position:
                    type: string
                    example: "user"
                  avatar_url:
                    type: string
                    example: null
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Deletes the user.
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a successfully deleted user confirmation.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/avatar:
    patch:
      summary: Updates the user avatar.
      tags:
        - users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Returns a JSON containing the updated user with avatar data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "User Name"
                  email:
                    type: string
                    format: email
                    example: "user@email.com"
                  position:
                    type: string
                    example: "admin"
                  avatar:
                    type: string
                    format: binary
                    example: "2196cf1aec2f18533aaf-file_name.png"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  avatar_url:
                    type: string
                    example: "https://image_upload_provider/2196cf1aec2f18533aaf-file_name.png"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /modules:
    post:
      summary: Creates a module.
      tags:
        - modules
      security:
        - bearerAuth: []
        - positionHeader: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Module Name"
                  description:
                    type: string
                    example: "Module description"
                  is_exercise:
                    type: boolean
                    example: false
      responses:
        '200':
          description: Returns a JSON containing the created module.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "Module Name"
                  description:
                    type: string
                    example: "Module description"
                  is_exercise:
                    type: boolean
                    example: false
                  image_url:
                    type: string
                    example: null
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ExclusiveAccess'
  /modules/{id}:
    put:
      summary: Updates a module.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Module id to update id.
      tags:
        - modules
      security:
        - bearerAuth: []
        - positionHeader: []
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Module Name"
                  description:
                    type: string
                    example: "Module description"
                  is_exercise:
                    type: boolean
                    example: false
      responses:
        '200':
          description: Returns a JSON containing the updated module.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "Module Name"
                  description:
                    type: string
                    example: "Module description"
                  is_exercise:
                    type: boolean
                    example: false
                  image_url:
                    type: string
                    example: null
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ExclusiveAccess'
    delete:
      summary: Deletes a module.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Module id to update id.
      tags:
        - modules
      security:
        - bearerAuth: []
        - positionHeader: []
      responses:
        '200':
          description: Returns a successfully deleted module confirmation.
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ExclusiveAccess'
  /modules/{id}/image:
    patch:
      summary: Updates the module image.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
            example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
          required: true
          description: Module id to update id.
      tags:
        - modules
      security:
        - bearerAuth: []
        - positionHeader: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Returns a JSON containing the updated module with image data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                  name:
                    type: string
                    example: "Module Name"
                  description:
                    type: string
                    example: "Module description"
                  is_exercise:
                    type: boolean
                    example: false
                  image:
                    type: string
                    format: binary
                    example: "2196cf1aec2f18533aaf-file_name.png"
                  created_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  updated_at:
                    type: string
                    format: dateformat
                    example: "2020-07-02T21:57:00.421Z"
                  image_url:
                    type: string
                    example: "https://image_upload_provider/2196cf1aec2f18533aaf-file_name.png"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ExclusiveAccess'
  /modules/all:
    get:
      summary: Gets all modules.
      tags:
        - modules
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns a JSON array containing all modules.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "3c68c90a-009b-4c59-9c7f-dab2774e9a57"
                    name:
                      type: string
                      example: "Module Name"
                    description:
                      type: string
                      example: "Module description"
                    is_exercise:
                      type: boolean
                      example: false
                    image:
                      type: string
                      format: binary
                      example: "2196cf1aec2f18533aaf-file_name.png"
                    created_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
                    updated_at:
                      type: string
                      format: dateformat
                      example: "2020-07-02T21:57:00.421Z"
                    image_url:
                      type: string
                      example: "https://image_upload_provider/2196cf1aec2f18533aaf-file_name.png"
        '400':
          $ref:  '#/components/responses/IncorrectToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
